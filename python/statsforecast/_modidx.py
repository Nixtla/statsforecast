# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/statsforecast/',
                'doc_host': 'https://Nixtla.github.io',
                'git_url': 'https://github.com/Nixtla/statsforecast/',
                'lib_path': 'python/statsforecast'},
  'syms': { 'statsforecast.adapters.prophet': { 'statsforecast.adapters.prophet.AutoARIMAProphet': ( 'src/adapters.prophet.html#autoarimaprophet',
                                                                                                     'statsforecast/adapters/prophet.py'),
                                                'statsforecast.adapters.prophet.AutoARIMAProphet.__init__': ( 'src/adapters.prophet.html#autoarimaprophet.__init__',
                                                                                                              'statsforecast/adapters/prophet.py'),
                                                'statsforecast.adapters.prophet.AutoARIMAProphet.fit': ( 'src/adapters.prophet.html#autoarimaprophet.fit',
                                                                                                         'statsforecast/adapters/prophet.py'),
                                                'statsforecast.adapters.prophet.AutoARIMAProphet.predict': ( 'src/adapters.prophet.html#autoarimaprophet.predict',
                                                                                                             'statsforecast/adapters/prophet.py')},
            'statsforecast.arima': { 'statsforecast.arima.ARIMASummary': ('src/arima.html#arimasummary', 'statsforecast/arima.py'),
                                     'statsforecast.arima.ARIMASummary.__init__': ( 'src/arima.html#arimasummary.__init__',
                                                                                    'statsforecast/arima.py'),
                                     'statsforecast.arima.ARIMASummary.__repr__': ( 'src/arima.html#arimasummary.__repr__',
                                                                                    'statsforecast/arima.py'),
                                     'statsforecast.arima.ARIMASummary.summary': ( 'src/arima.html#arimasummary.summary',
                                                                                   'statsforecast/arima.py'),
                                     'statsforecast.arima.ARIMA_invtrans': ('src/arima.html#arima_invtrans', 'statsforecast/arima.py'),
                                     'statsforecast.arima.Arima': ('src/arima.html#arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA': ('src/arima.html#autoarima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.__init__': ( 'src/arima.html#autoarima.__init__',
                                                                                 'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.fit': ('src/arima.html#autoarima.fit', 'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.predict': ( 'src/arima.html#autoarima.predict',
                                                                                'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.predict_in_sample': ( 'src/arima.html#autoarima.predict_in_sample',
                                                                                          'statsforecast/arima.py'),
                                     'statsforecast.arima.AutoARIMA.summary': ( 'src/arima.html#autoarima.summary',
                                                                                'statsforecast/arima.py'),
                                     'statsforecast.arima.arima': ('src/arima.html#arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima2': ('src/arima.html#arima2', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_css': ('src/arima.html#arima_css', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_gradtrans': ('src/arima.html#arima_gradtrans', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_like': ('src/arima.html#arima_like', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_string': ('src/arima.html#arima_string', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_transpar': ('src/arima.html#arima_transpar', 'statsforecast/arima.py'),
                                     'statsforecast.arima.arima_undopars': ('src/arima.html#arima_undopars', 'statsforecast/arima.py'),
                                     'statsforecast.arima.auto_arima_f': ('src/arima.html#auto_arima_f', 'statsforecast/arima.py'),
                                     'statsforecast.arima.change_drift_name': ( 'src/arima.html#change_drift_name',
                                                                                'statsforecast/arima.py'),
                                     'statsforecast.arima.checkarima': ('src/arima.html#checkarima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.convert_coef_name': ( 'src/arima.html#convert_coef_name',
                                                                                'statsforecast/arima.py'),
                                     'statsforecast.arima.diff': ('src/arima.html#diff', 'statsforecast/arima.py'),
                                     'statsforecast.arima.fitted_arima': ('src/arima.html#fitted_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.fixed_params_from_dict': ( 'src/arima.html#fixed_params_from_dict',
                                                                                     'statsforecast/arima.py'),
                                     'statsforecast.arima.forecast_arima': ('src/arima.html#forecast_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.forward_arima': ('src/arima.html#forward_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.getQ0': ('src/arima.html#getq0', 'statsforecast/arima.py'),
                                     'statsforecast.arima.is_constant': ('src/arima.html#is_constant', 'statsforecast/arima.py'),
                                     'statsforecast.arima.kalman_forecast': ('src/arima.html#kalman_forecast', 'statsforecast/arima.py'),
                                     'statsforecast.arima.make_arima': ('src/arima.html#make_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.myarima': ('src/arima.html#myarima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.ndiffs': ('src/arima.html#ndiffs', 'statsforecast/arima.py'),
                                     'statsforecast.arima.newmodel': ('src/arima.html#newmodel', 'statsforecast/arima.py'),
                                     'statsforecast.arima.nsdiffs': ('src/arima.html#nsdiffs', 'statsforecast/arima.py'),
                                     'statsforecast.arima.predict_arima': ('src/arima.html#predict_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.print_statsforecast_ARIMA': ( 'src/arima.html#print_statsforecast_arima',
                                                                                        'statsforecast/arima.py'),
                                     'statsforecast.arima.search_arima': ('src/arima.html#search_arima', 'statsforecast/arima.py'),
                                     'statsforecast.arima.seas_heuristic': ('src/arima.html#seas_heuristic', 'statsforecast/arima.py')},
            'statsforecast.ces': { 'statsforecast.ces._simulate_pred_intervals': ( 'src/ces.html#_simulate_pred_intervals',
                                                                                   'statsforecast/ces.py'),
                                   'statsforecast.ces.auto_ces': ('src/ces.html#auto_ces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.ces_target_fn': ('src/ces.html#ces_target_fn', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cescalc': ('src/ces.html#cescalc', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cesfcst': ('src/ces.html#cesfcst', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cesforecast': ('src/ces.html#cesforecast', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cesmodel': ('src/ces.html#cesmodel', 'statsforecast/ces.py'),
                                   'statsforecast.ces.cesupdate': ('src/ces.html#cesupdate', 'statsforecast/ces.py'),
                                   'statsforecast.ces.forecast_ces': ('src/ces.html#forecast_ces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.forward_ces': ('src/ces.html#forward_ces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.initparamces': ('src/ces.html#initparamces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.initstate': ('src/ces.html#initstate', 'statsforecast/ces.py'),
                                   'statsforecast.ces.nelder_mead_ces': ('src/ces.html#nelder_mead_ces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.optimize_ces_target_fn': ( 'src/ces.html#optimize_ces_target_fn',
                                                                                 'statsforecast/ces.py'),
                                   'statsforecast.ces.pegelsfcast_C': ('src/ces.html#pegelsfcast_c', 'statsforecast/ces.py'),
                                   'statsforecast.ces.pegelsresid_ces': ('src/ces.html#pegelsresid_ces', 'statsforecast/ces.py'),
                                   'statsforecast.ces.switch_ces': ('src/ces.html#switch_ces', 'statsforecast/ces.py')},
            'statsforecast.core': { 'statsforecast.core.GroupedArray': ('src/core/core.html#groupedarray', 'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.__eq__': ( 'src/core/core.html#groupedarray.__eq__',
                                                                                'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.__init__': ( 'src/core/core.html#groupedarray.__init__',
                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray._get_cols': ( 'src/core/core.html#groupedarray._get_cols',
                                                                                   'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray._output_fcst': ( 'src/core/core.html#groupedarray._output_fcst',
                                                                                      'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray._single_threaded_cross_validation': ( 'src/core/core.html#groupedarray._single_threaded_cross_validation',
                                                                                                           'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray._single_threaded_fit': ( 'src/core/core.html#groupedarray._single_threaded_fit',
                                                                                              'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray._single_threaded_fit_predict': ( 'src/core/core.html#groupedarray._single_threaded_fit_predict',
                                                                                                      'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray._single_threaded_forecast': ( 'src/core/core.html#groupedarray._single_threaded_forecast',
                                                                                                   'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray._single_threaded_predict': ( 'src/core/core.html#groupedarray._single_threaded_predict',
                                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.cross_validation': ( 'src/core/core.html#groupedarray.cross_validation',
                                                                                          'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.fit': ('src/core/core.html#groupedarray.fit', 'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.fit_predict': ( 'src/core/core.html#groupedarray.fit_predict',
                                                                                     'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.forecast': ( 'src/core/core.html#groupedarray.forecast',
                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.predict': ( 'src/core/core.html#groupedarray.predict',
                                                                                 'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.split': ( 'src/core/core.html#groupedarray.split',
                                                                               'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.split_fm': ( 'src/core/core.html#groupedarray.split_fm',
                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core.GroupedArray.take': ( 'src/core/core.html#groupedarray.take',
                                                                              'statsforecast/core.py'),
                                    'statsforecast.core.ParallelBackend': ('src/core/core.html#parallelbackend', 'statsforecast/core.py'),
                                    'statsforecast.core.ParallelBackend.cross_validation': ( 'src/core/core.html#parallelbackend.cross_validation',
                                                                                             'statsforecast/core.py'),
                                    'statsforecast.core.ParallelBackend.forecast': ( 'src/core/core.html#parallelbackend.forecast',
                                                                                     'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast': ('src/core/core.html#statsforecast', 'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast._is_native': ( 'src/core/core.html#statsforecast._is_native',
                                                                                     'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.cross_validation': ( 'src/core/core.html#statsforecast.cross_validation',
                                                                                           'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.forecast': ( 'src/core/core.html#statsforecast.forecast',
                                                                                   'statsforecast/core.py'),
                                    'statsforecast.core.StatsForecast.forecast_fitted_values': ( 'src/core/core.html#statsforecast.forecast_fitted_values',
                                                                                                 'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast': ('src/core/core.html#_statsforecast', 'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.__init__': ( 'src/core/core.html#_statsforecast.__init__',
                                                                                    'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.__repr__': ( 'src/core/core.html#_statsforecast.__repr__',
                                                                                    'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._cross_validation_parallel': ( 'src/core/core.html#_statsforecast._cross_validation_parallel',
                                                                                                      'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._fit_parallel': ( 'src/core/core.html#_statsforecast._fit_parallel',
                                                                                         'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._fit_predict_parallel': ( 'src/core/core.html#_statsforecast._fit_predict_parallel',
                                                                                                 'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._forecast_parallel': ( 'src/core/core.html#_statsforecast._forecast_parallel',
                                                                                              'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._get_cap_size': ( 'src/core/core.html#_statsforecast._get_cap_size',
                                                                                         'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._get_gas_Xs': ( 'src/core/core.html#_statsforecast._get_gas_xs',
                                                                                       'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._get_pool': ( 'src/core/core.html#_statsforecast._get_pool',
                                                                                     'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._make_future_df': ( 'src/core/core.html#_statsforecast._make_future_df',
                                                                                           'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._parse_X_level': ( 'src/core/core.html#_statsforecast._parse_x_level',
                                                                                          'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._predict_parallel': ( 'src/core/core.html#_statsforecast._predict_parallel',
                                                                                             'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._prepare_fit': ( 'src/core/core.html#_statsforecast._prepare_fit',
                                                                                        'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._set_prediction_intervals': ( 'src/core/core.html#_statsforecast._set_prediction_intervals',
                                                                                                     'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._validate_exog': ( 'src/core/core.html#_statsforecast._validate_exog',
                                                                                          'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._validate_model_names': ( 'src/core/core.html#_statsforecast._validate_model_names',
                                                                                                 'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast._validate_sizes_for_prediction_intervals': ( 'src/core/core.html#_statsforecast._validate_sizes_for_prediction_intervals',
                                                                                                                    'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.cross_validation': ( 'src/core/core.html#_statsforecast.cross_validation',
                                                                                            'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.cross_validation_fitted_values': ( 'src/core/core.html#_statsforecast.cross_validation_fitted_values',
                                                                                                          'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.fit': ( 'src/core/core.html#_statsforecast.fit',
                                                                               'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.fit_predict': ( 'src/core/core.html#_statsforecast.fit_predict',
                                                                                       'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.forecast': ( 'src/core/core.html#_statsforecast.forecast',
                                                                                    'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.forecast_fitted_values': ( 'src/core/core.html#_statsforecast.forecast_fitted_values',
                                                                                                  'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.load': ( 'src/core/core.html#_statsforecast.load',
                                                                                'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.plot': ( 'src/core/core.html#_statsforecast.plot',
                                                                                'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.predict': ( 'src/core/core.html#_statsforecast.predict',
                                                                                   'statsforecast/core.py'),
                                    'statsforecast.core._StatsForecast.save': ( 'src/core/core.html#_statsforecast.save',
                                                                                'statsforecast/core.py'),
                                    'statsforecast.core._get_n_jobs': ('src/core/core.html#_get_n_jobs', 'statsforecast/core.py'),
                                    'statsforecast.core.make_backend': ('src/core/core.html#make_backend', 'statsforecast/core.py')},
            'statsforecast.distributed.fugue': { 'statsforecast.distributed.fugue.FugueBackend': ( 'src/core/distributed.fugue.html#fuguebackend',
                                                                                                   'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend.__getstate__': ( 'src/core/distributed.fugue.html#fuguebackend.__getstate__',
                                                                                                                'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend.__init__': ( 'src/core/distributed.fugue.html#fuguebackend.__init__',
                                                                                                            'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._cv': ( 'src/core/distributed.fugue.html#fuguebackend._cv',
                                                                                                       'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._forecast': ( 'src/core/distributed.fugue.html#fuguebackend._forecast',
                                                                                                             'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._forecast_X': ( 'src/core/distributed.fugue.html#fuguebackend._forecast_x',
                                                                                                               'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._forecast_X_fitted': ( 'src/core/distributed.fugue.html#fuguebackend._forecast_x_fitted',
                                                                                                                      'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._forecast_noX': ( 'src/core/distributed.fugue.html#fuguebackend._forecast_nox',
                                                                                                                 'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._forecast_noX_fitted': ( 'src/core/distributed.fugue.html#fuguebackend._forecast_nox_fitted',
                                                                                                                        'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._get_output_schema': ( 'src/core/distributed.fugue.html#fuguebackend._get_output_schema',
                                                                                                                      'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._retrieve_fitted_df': ( 'src/core/distributed.fugue.html#fuguebackend._retrieve_fitted_df',
                                                                                                                       'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend._retrieve_forecast_df': ( 'src/core/distributed.fugue.html#fuguebackend._retrieve_forecast_df',
                                                                                                                         'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend.cross_validation': ( 'src/core/distributed.fugue.html#fuguebackend.cross_validation',
                                                                                                                    'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend.forecast': ( 'src/core/distributed.fugue.html#fuguebackend.forecast',
                                                                                                            'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue.FugueBackend.forecast_fitted_values': ( 'src/core/distributed.fugue.html#fuguebackend.forecast_fitted_values',
                                                                                                                          'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue._cotransform': ( 'src/core/distributed.fugue.html#_cotransform',
                                                                                                   'statsforecast/distributed/fugue.py'),
                                                 'statsforecast.distributed.fugue._make_fugue_backend': ( 'src/core/distributed.fugue.html#_make_fugue_backend',
                                                                                                          'statsforecast/distributed/fugue.py')},
            'statsforecast.distributed.multiprocess': { 'statsforecast.distributed.multiprocess.MultiprocessBackend': ( 'src/distributed.multiprocess.html#multiprocessbackend',
                                                                                                                        'statsforecast/distributed/multiprocess.py'),
                                                        'statsforecast.distributed.multiprocess.MultiprocessBackend.__init__': ( 'src/distributed.multiprocess.html#multiprocessbackend.__init__',
                                                                                                                                 'statsforecast/distributed/multiprocess.py'),
                                                        'statsforecast.distributed.multiprocess.MultiprocessBackend.cross_validation': ( 'src/distributed.multiprocess.html#multiprocessbackend.cross_validation',
                                                                                                                                         'statsforecast/distributed/multiprocess.py'),
                                                        'statsforecast.distributed.multiprocess.MultiprocessBackend.forecast': ( 'src/distributed.multiprocess.html#multiprocessbackend.forecast',
                                                                                                                                 'statsforecast/distributed/multiprocess.py')},
            'statsforecast.ets': { 'statsforecast.ets._class3models': ('src/ets.html#_class3models', 'statsforecast/ets.py'),
                                   'statsforecast.ets._compute_pred_intervals': ( 'src/ets.html#_compute_pred_intervals',
                                                                                  'statsforecast/ets.py'),
                                   'statsforecast.ets._compute_sigmah': ('src/ets.html#_compute_sigmah', 'statsforecast/ets.py'),
                                   'statsforecast.ets.admissible': ('src/ets.html#admissible', 'statsforecast/ets.py'),
                                   'statsforecast.ets.check_param': ('src/ets.html#check_param', 'statsforecast/ets.py'),
                                   'statsforecast.ets.ets_f': ('src/ets.html#ets_f', 'statsforecast/ets.py'),
                                   'statsforecast.ets.etsforecast': ('src/ets.html#etsforecast', 'statsforecast/ets.py'),
                                   'statsforecast.ets.etsmodel': ('src/ets.html#etsmodel', 'statsforecast/ets.py'),
                                   'statsforecast.ets.etssimulate': ('src/ets.html#etssimulate', 'statsforecast/ets.py'),
                                   'statsforecast.ets.forecast_ets': ('src/ets.html#forecast_ets', 'statsforecast/ets.py'),
                                   'statsforecast.ets.forward_ets': ('src/ets.html#forward_ets', 'statsforecast/ets.py'),
                                   'statsforecast.ets.fourier': ('src/ets.html#fourier', 'statsforecast/ets.py'),
                                   'statsforecast.ets.initparam': ('src/ets.html#initparam', 'statsforecast/ets.py'),
                                   'statsforecast.ets.initstate': ('src/ets.html#initstate', 'statsforecast/ets.py'),
                                   'statsforecast.ets.is_constant': ('src/ets.html#is_constant', 'statsforecast/ets.py'),
                                   'statsforecast.ets.optimize_ets_target_fn': ( 'src/ets.html#optimize_ets_target_fn',
                                                                                 'statsforecast/ets.py'),
                                   'statsforecast.ets.pegelsfcast_C': ('src/ets.html#pegelsfcast_c', 'statsforecast/ets.py'),
                                   'statsforecast.ets.pegelsresid_C': ('src/ets.html#pegelsresid_c', 'statsforecast/ets.py'),
                                   'statsforecast.ets.switch': ('src/ets.html#switch', 'statsforecast/ets.py'),
                                   'statsforecast.ets.switch_criterion': ('src/ets.html#switch_criterion', 'statsforecast/ets.py')},
            'statsforecast.feature_engineering': { 'statsforecast.feature_engineering.mstl_decomposition': ( 'src/feature_engineering.html#mstl_decomposition',
                                                                                                             'statsforecast/feature_engineering.py')},
            'statsforecast.garch': { 'statsforecast.garch.garch_cons': ('src/garch.html#garch_cons', 'statsforecast/garch.py'),
                                     'statsforecast.garch.garch_forecast': ('src/garch.html#garch_forecast', 'statsforecast/garch.py'),
                                     'statsforecast.garch.garch_loglik': ('src/garch.html#garch_loglik', 'statsforecast/garch.py'),
                                     'statsforecast.garch.garch_model': ('src/garch.html#garch_model', 'statsforecast/garch.py'),
                                     'statsforecast.garch.garch_sigma2': ('src/garch.html#garch_sigma2', 'statsforecast/garch.py'),
                                     'statsforecast.garch.generate_garch_data': ( 'src/garch.html#generate_garch_data',
                                                                                  'statsforecast/garch.py')},
            'statsforecast.mfles': { 'statsforecast.mfles.MFLES': ('src/mfles.html#mfles', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.MFLES.__init__': ('src/mfles.html#mfles.__init__', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.MFLES.fit': ('src/mfles.html#mfles.fit', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.MFLES.optimize': ('src/mfles.html#mfles.optimize', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.MFLES.predict': ('src/mfles.html#mfles.predict', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.MFLES.seasonal_decompose': ( 'src/mfles.html#mfles.seasonal_decompose',
                                                                                       'statsforecast/mfles.py'),
                                     'statsforecast.mfles.OLS': ('src/mfles.html#ols', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.OLS.fit': ('src/mfles.html#ols.fit', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.OLS.predict': ('src/mfles.html#ols.predict', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.Zeros': ('src/mfles.html#zeros', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.Zeros.predict': ('src/mfles.html#zeros.predict', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles._ols': ('src/mfles.html#_ols', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.calc_cov': ('src/mfles.html#calc_cov', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.calc_mae': ('src/mfles.html#calc_mae', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.calc_mape': ('src/mfles.html#calc_mape', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.calc_mse': ('src/mfles.html#calc_mse', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.calc_rsq': ('src/mfles.html#calc_rsq', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.calc_seas_strength': ( 'src/mfles.html#calc_seas_strength',
                                                                                 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.calc_smape': ('src/mfles.html#calc_smape', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.calc_trend_strength': ( 'src/mfles.html#calc_trend_strength',
                                                                                  'statsforecast/mfles.py'),
                                     'statsforecast.mfles.cap_outliers': ('src/mfles.html#cap_outliers', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.cross_validation': ('src/mfles.html#cross_validation', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.default_configs': ('src/mfles.html#default_configs', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.fast_ols': ('src/mfles.html#fast_ols', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.get_basis': ('src/mfles.html#get_basis', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.get_fourier_series': ( 'src/mfles.html#get_fourier_series',
                                                                                 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.get_future_basis': ('src/mfles.html#get_future_basis', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.get_seasonality_weights': ( 'src/mfles.html#get_seasonality_weights',
                                                                                      'statsforecast/mfles.py'),
                                     'statsforecast.mfles.lasso_nb': ('src/mfles.html#lasso_nb', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.logic_check': ('src/mfles.html#logic_check', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.logic_layer': ('src/mfles.html#logic_layer', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.median': ('src/mfles.html#median', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.ols': ('src/mfles.html#ols', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.ses_ensemble': ('src/mfles.html#ses_ensemble', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.set_fourier': ('src/mfles.html#set_fourier', 'statsforecast/mfles.py'),
                                     'statsforecast.mfles.siegel_repeated_medians': ( 'src/mfles.html#siegel_repeated_medians',
                                                                                      'statsforecast/mfles.py'),
                                     'statsforecast.mfles.wls': ('src/mfles.html#wls', 'statsforecast/mfles.py')},
            'statsforecast.models': { 'statsforecast.models.ADIDA': ('src/core/models.html#adida', 'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.__init__': ( 'src/core/models.html#adida.__init__',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.fit': ('src/core/models.html#adida.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.forecast': ( 'src/core/models.html#adida.forecast',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.predict': ( 'src/core/models.html#adida.predict',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.ADIDA.predict_in_sample': ( 'src/core/models.html#adida.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.ARCH': ('src/core/models.html#arch', 'statsforecast/models.py'),
                                      'statsforecast.models.ARCH.__init__': ( 'src/core/models.html#arch.__init__',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.ARIMA': ('src/core/models.html#arima', 'statsforecast/models.py'),
                                      'statsforecast.models.ARIMA.__init__': ( 'src/core/models.html#arima.__init__',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.ARIMA.fit': ('src/core/models.html#arima.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.ARIMA.forecast': ( 'src/core/models.html#arima.forecast',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.ARIMA.forward': ( 'src/core/models.html#arima.forward',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.ARIMA.predict': ( 'src/core/models.html#arima.predict',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.ARIMA.predict_in_sample': ( 'src/core/models.html#arima.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA': ('src/core/models.html#autoarima', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.__init__': ( 'src/core/models.html#autoarima.__init__',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.fit': ( 'src/core/models.html#autoarima.fit',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.forecast': ( 'src/core/models.html#autoarima.forecast',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.forward': ( 'src/core/models.html#autoarima.forward',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.predict': ( 'src/core/models.html#autoarima.predict',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.AutoARIMA.predict_in_sample': ( 'src/core/models.html#autoarima.predict_in_sample',
                                                                                            'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES': ('src/core/models.html#autoces', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.__init__': ( 'src/core/models.html#autoces.__init__',
                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.fit': ('src/core/models.html#autoces.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.forecast': ( 'src/core/models.html#autoces.forecast',
                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.forward': ( 'src/core/models.html#autoces.forward',
                                                                                'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.predict': ( 'src/core/models.html#autoces.predict',
                                                                                'statsforecast/models.py'),
                                      'statsforecast.models.AutoCES.predict_in_sample': ( 'src/core/models.html#autoces.predict_in_sample',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.AutoETS': ('src/core/models.html#autoets', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoETS.__init__': ( 'src/core/models.html#autoets.__init__',
                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.AutoETS.fit': ('src/core/models.html#autoets.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoETS.forecast': ( 'src/core/models.html#autoets.forecast',
                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.AutoETS.forward': ( 'src/core/models.html#autoets.forward',
                                                                                'statsforecast/models.py'),
                                      'statsforecast.models.AutoETS.predict': ( 'src/core/models.html#autoets.predict',
                                                                                'statsforecast/models.py'),
                                      'statsforecast.models.AutoETS.predict_in_sample': ( 'src/core/models.html#autoets.predict_in_sample',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.AutoMFLES': ('src/core/models.html#automfles', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoMFLES.__init__': ( 'src/core/models.html#automfles.__init__',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoMFLES._fit': ( 'src/core/models.html#automfles._fit',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.AutoMFLES.fit': ( 'src/core/models.html#automfles.fit',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.AutoMFLES.forecast': ( 'src/core/models.html#automfles.forecast',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoMFLES.predict': ( 'src/core/models.html#automfles.predict',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.AutoMFLES.predict_in_sample': ( 'src/core/models.html#automfles.predict_in_sample',
                                                                                            'statsforecast/models.py'),
                                      'statsforecast.models.AutoRegressive': ( 'src/core/models.html#autoregressive',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.AutoRegressive.__init__': ( 'src/core/models.html#autoregressive.__init__',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.AutoTBATS': ('src/core/models.html#autotbats', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoTBATS.__init__': ( 'src/core/models.html#autotbats.__init__',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoTheta': ('src/core/models.html#autotheta', 'statsforecast/models.py'),
                                      'statsforecast.models.AutoTheta.__init__': ( 'src/core/models.html#autotheta.__init__',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoTheta.fit': ( 'src/core/models.html#autotheta.fit',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.AutoTheta.forecast': ( 'src/core/models.html#autotheta.forecast',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.AutoTheta.forward': ( 'src/core/models.html#autotheta.forward',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.AutoTheta.predict': ( 'src/core/models.html#autotheta.predict',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.AutoTheta.predict_in_sample': ( 'src/core/models.html#autotheta.predict_in_sample',
                                                                                            'statsforecast/models.py'),
                                      'statsforecast.models.ConstantModel': ( 'src/core/models.html#constantmodel',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.ConstantModel.__init__': ( 'src/core/models.html#constantmodel.__init__',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.ConstantModel.fit': ( 'src/core/models.html#constantmodel.fit',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.ConstantModel.forecast': ( 'src/core/models.html#constantmodel.forecast',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.ConstantModel.forward': ( 'src/core/models.html#constantmodel.forward',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.ConstantModel.predict': ( 'src/core/models.html#constantmodel.predict',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.ConstantModel.predict_in_sample': ( 'src/core/models.html#constantmodel.predict_in_sample',
                                                                                                'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic': ( 'src/core/models.html#crostonclassic',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.__init__': ( 'src/core/models.html#crostonclassic.__init__',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.fit': ( 'src/core/models.html#crostonclassic.fit',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.forecast': ( 'src/core/models.html#crostonclassic.forecast',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.predict': ( 'src/core/models.html#crostonclassic.predict',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.CrostonClassic.predict_in_sample': ( 'src/core/models.html#crostonclassic.predict_in_sample',
                                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized': ( 'src/core/models.html#crostonoptimized',
                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.__init__': ( 'src/core/models.html#crostonoptimized.__init__',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.fit': ( 'src/core/models.html#crostonoptimized.fit',
                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.forecast': ( 'src/core/models.html#crostonoptimized.forecast',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.predict': ( 'src/core/models.html#crostonoptimized.predict',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models.CrostonOptimized.predict_in_sample': ( 'src/core/models.html#crostonoptimized.predict_in_sample',
                                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA': ('src/core/models.html#crostonsba', 'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.__init__': ( 'src/core/models.html#crostonsba.__init__',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.fit': ( 'src/core/models.html#crostonsba.fit',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.forecast': ( 'src/core/models.html#crostonsba.forecast',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.predict': ( 'src/core/models.html#crostonsba.predict',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.CrostonSBA.predict_in_sample': ( 'src/core/models.html#crostonsba.predict_in_sample',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.DynamicOptimizedTheta': ( 'src/core/models.html#dynamicoptimizedtheta',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.DynamicOptimizedTheta.__init__': ( 'src/core/models.html#dynamicoptimizedtheta.__init__',
                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.DynamicTheta': ('src/core/models.html#dynamictheta', 'statsforecast/models.py'),
                                      'statsforecast.models.DynamicTheta.__init__': ( 'src/core/models.html#dynamictheta.__init__',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.GARCH': ('src/core/models.html#garch', 'statsforecast/models.py'),
                                      'statsforecast.models.GARCH.__init__': ( 'src/core/models.html#garch.__init__',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.GARCH.fit': ('src/core/models.html#garch.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.GARCH.forecast': ( 'src/core/models.html#garch.forecast',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.GARCH.predict': ( 'src/core/models.html#garch.predict',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.GARCH.predict_in_sample': ( 'src/core/models.html#garch.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage': ( 'src/core/models.html#historicaverage',
                                                                                'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.__init__': ( 'src/core/models.html#historicaverage.__init__',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.fit': ( 'src/core/models.html#historicaverage.fit',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.forecast': ( 'src/core/models.html#historicaverage.forecast',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.predict': ( 'src/core/models.html#historicaverage.predict',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.HistoricAverage.predict_in_sample': ( 'src/core/models.html#historicaverage.predict_in_sample',
                                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.Holt': ('src/core/models.html#holt', 'statsforecast/models.py'),
                                      'statsforecast.models.Holt.__init__': ( 'src/core/models.html#holt.__init__',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.HoltWinters': ('src/core/models.html#holtwinters', 'statsforecast/models.py'),
                                      'statsforecast.models.HoltWinters.__init__': ( 'src/core/models.html#holtwinters.__init__',
                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA': ('src/core/models.html#imapa', 'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.__init__': ( 'src/core/models.html#imapa.__init__',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.fit': ('src/core/models.html#imapa.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.forecast': ( 'src/core/models.html#imapa.forecast',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.predict': ( 'src/core/models.html#imapa.predict',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.IMAPA.predict_in_sample': ( 'src/core/models.html#imapa.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.MFLES': ('src/core/models.html#mfles', 'statsforecast/models.py'),
                                      'statsforecast.models.MFLES.__init__': ( 'src/core/models.html#mfles.__init__',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.MFLES._fit': ('src/core/models.html#mfles._fit', 'statsforecast/models.py'),
                                      'statsforecast.models.MFLES.fit': ('src/core/models.html#mfles.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.MFLES.forecast': ( 'src/core/models.html#mfles.forecast',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.MFLES.predict': ( 'src/core/models.html#mfles.predict',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.MFLES.predict_in_sample': ( 'src/core/models.html#mfles.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.MSTL': ('src/core/models.html#mstl', 'statsforecast/models.py'),
                                      'statsforecast.models.MSTL.__init__': ( 'src/core/models.html#mstl.__init__',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.MSTL.fit': ('src/core/models.html#mstl.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.MSTL.forecast': ( 'src/core/models.html#mstl.forecast',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.MSTL.forward': ('src/core/models.html#mstl.forward', 'statsforecast/models.py'),
                                      'statsforecast.models.MSTL.predict': ('src/core/models.html#mstl.predict', 'statsforecast/models.py'),
                                      'statsforecast.models.MSTL.predict_in_sample': ( 'src/core/models.html#mstl.predict_in_sample',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.NaNModel': ('src/core/models.html#nanmodel', 'statsforecast/models.py'),
                                      'statsforecast.models.NaNModel.__init__': ( 'src/core/models.html#nanmodel.__init__',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.Naive': ('src/core/models.html#naive', 'statsforecast/models.py'),
                                      'statsforecast.models.Naive.__init__': ( 'src/core/models.html#naive.__init__',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.Naive.fit': ('src/core/models.html#naive.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.Naive.forecast': ( 'src/core/models.html#naive.forecast',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.Naive.forward': ( 'src/core/models.html#naive.forward',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.Naive.predict': ( 'src/core/models.html#naive.predict',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.Naive.predict_in_sample': ( 'src/core/models.html#naive.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.OptimizedTheta': ( 'src/core/models.html#optimizedtheta',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.OptimizedTheta.__init__': ( 'src/core/models.html#optimizedtheta.__init__',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift': ( 'src/core/models.html#randomwalkwithdrift',
                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.__init__': ( 'src/core/models.html#randomwalkwithdrift.__init__',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.fit': ( 'src/core/models.html#randomwalkwithdrift.fit',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.forecast': ( 'src/core/models.html#randomwalkwithdrift.forecast',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.predict': ( 'src/core/models.html#randomwalkwithdrift.predict',
                                                                                            'statsforecast/models.py'),
                                      'statsforecast.models.RandomWalkWithDrift.predict_in_sample': ( 'src/core/models.html#randomwalkwithdrift.predict_in_sample',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing': ( 'src/core/models.html#seasonalexponentialsmoothing',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.__init__': ( 'src/core/models.html#seasonalexponentialsmoothing.__init__',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.fit': ( 'src/core/models.html#seasonalexponentialsmoothing.fit',
                                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.forecast': ( 'src/core/models.html#seasonalexponentialsmoothing.forecast',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.predict': ( 'src/core/models.html#seasonalexponentialsmoothing.predict',
                                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothing.predict_in_sample': ( 'src/core/models.html#seasonalexponentialsmoothing.predict_in_sample',
                                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized': ( 'src/core/models.html#seasonalexponentialsmoothingoptimized',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.__init__': ( 'src/core/models.html#seasonalexponentialsmoothingoptimized.__init__',
                                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.fit': ( 'src/core/models.html#seasonalexponentialsmoothingoptimized.fit',
                                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.forecast': ( 'src/core/models.html#seasonalexponentialsmoothingoptimized.forecast',
                                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.predict': ( 'src/core/models.html#seasonalexponentialsmoothingoptimized.predict',
                                                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalExponentialSmoothingOptimized.predict_in_sample': ( 'src/core/models.html#seasonalexponentialsmoothingoptimized.predict_in_sample',
                                                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive': ( 'src/core/models.html#seasonalnaive',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.__init__': ( 'src/core/models.html#seasonalnaive.__init__',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.fit': ( 'src/core/models.html#seasonalnaive.fit',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.forecast': ( 'src/core/models.html#seasonalnaive.forecast',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.predict': ( 'src/core/models.html#seasonalnaive.predict',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalNaive.predict_in_sample': ( 'src/core/models.html#seasonalnaive.predict_in_sample',
                                                                                                'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage': ( 'src/core/models.html#seasonalwindowaverage',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.__init__': ( 'src/core/models.html#seasonalwindowaverage.__init__',
                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.fit': ( 'src/core/models.html#seasonalwindowaverage.fit',
                                                                                          'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.forecast': ( 'src/core/models.html#seasonalwindowaverage.forecast',
                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.predict': ( 'src/core/models.html#seasonalwindowaverage.predict',
                                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.SeasonalWindowAverage.predict_in_sample': ( 'src/core/models.html#seasonalwindowaverage.predict_in_sample',
                                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing': ( 'src/core/models.html#simpleexponentialsmoothing',
                                                                                           'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.__init__': ( 'src/core/models.html#simpleexponentialsmoothing.__init__',
                                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.fit': ( 'src/core/models.html#simpleexponentialsmoothing.fit',
                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.forecast': ( 'src/core/models.html#simpleexponentialsmoothing.forecast',
                                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.predict': ( 'src/core/models.html#simpleexponentialsmoothing.predict',
                                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothing.predict_in_sample': ( 'src/core/models.html#simpleexponentialsmoothing.predict_in_sample',
                                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized': ( 'src/core/models.html#simpleexponentialsmoothingoptimized',
                                                                                                    'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.__init__': ( 'src/core/models.html#simpleexponentialsmoothingoptimized.__init__',
                                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.fit': ( 'src/core/models.html#simpleexponentialsmoothingoptimized.fit',
                                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.forecast': ( 'src/core/models.html#simpleexponentialsmoothingoptimized.forecast',
                                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.predict': ( 'src/core/models.html#simpleexponentialsmoothingoptimized.predict',
                                                                                                            'statsforecast/models.py'),
                                      'statsforecast.models.SimpleExponentialSmoothingOptimized.predict_in_sample': ( 'src/core/models.html#simpleexponentialsmoothingoptimized.predict_in_sample',
                                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SklearnModel': ('src/core/models.html#sklearnmodel', 'statsforecast/models.py'),
                                      'statsforecast.models.SklearnModel.__init__': ( 'src/core/models.html#sklearnmodel.__init__',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SklearnModel.fit': ( 'src/core/models.html#sklearnmodel.fit',
                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models.SklearnModel.forecast': ( 'src/core/models.html#sklearnmodel.forecast',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.SklearnModel.forward': ( 'src/core/models.html#sklearnmodel.forward',
                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models.SklearnModel.predict': ( 'src/core/models.html#sklearnmodel.predict',
                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models.SklearnModel.predict_in_sample': ( 'src/core/models.html#sklearnmodel.predict_in_sample',
                                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.TBATS': ('src/core/models.html#tbats', 'statsforecast/models.py'),
                                      'statsforecast.models.TBATS.__init__': ( 'src/core/models.html#tbats.__init__',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.TBATS.fit': ('src/core/models.html#tbats.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.TBATS.forecast': ( 'src/core/models.html#tbats.forecast',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.TBATS.predict': ( 'src/core/models.html#tbats.predict',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.TBATS.predict_in_sample': ( 'src/core/models.html#tbats.predict_in_sample',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models.TSB': ('src/core/models.html#tsb', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.__init__': ('src/core/models.html#tsb.__init__', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.fit': ('src/core/models.html#tsb.fit', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.forecast': ('src/core/models.html#tsb.forecast', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.predict': ('src/core/models.html#tsb.predict', 'statsforecast/models.py'),
                                      'statsforecast.models.TSB.predict_in_sample': ( 'src/core/models.html#tsb.predict_in_sample',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.Theta': ('src/core/models.html#theta', 'statsforecast/models.py'),
                                      'statsforecast.models.Theta.__init__': ( 'src/core/models.html#theta.__init__',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage': ( 'src/core/models.html#windowaverage',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.__init__': ( 'src/core/models.html#windowaverage.__init__',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.fit': ( 'src/core/models.html#windowaverage.fit',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.forecast': ( 'src/core/models.html#windowaverage.forecast',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.predict': ( 'src/core/models.html#windowaverage.predict',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models.WindowAverage.predict_in_sample': ( 'src/core/models.html#windowaverage.predict_in_sample',
                                                                                                'statsforecast/models.py'),
                                      'statsforecast.models.ZeroModel': ('src/core/models.html#zeromodel', 'statsforecast/models.py'),
                                      'statsforecast.models.ZeroModel.__init__': ( 'src/core/models.html#zeromodel.__init__',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models._TS': ('src/core/models.html#_ts', 'statsforecast/models.py'),
                                      'statsforecast.models._TS.__repr__': ('src/core/models.html#_ts.__repr__', 'statsforecast/models.py'),
                                      'statsforecast.models._TS._add_conformal_intervals': ( 'src/core/models.html#_ts._add_conformal_intervals',
                                                                                             'statsforecast/models.py'),
                                      'statsforecast.models._TS._add_predict_conformal_intervals': ( 'src/core/models.html#_ts._add_predict_conformal_intervals',
                                                                                                     'statsforecast/models.py'),
                                      'statsforecast.models._TS._conformal_method': ( 'src/core/models.html#_ts._conformal_method',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models._TS._conformity_scores': ( 'src/core/models.html#_ts._conformity_scores',
                                                                                       'statsforecast/models.py'),
                                      'statsforecast.models._TS._store_cs': ( 'src/core/models.html#_ts._store_cs',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models._TS.new': ('src/core/models.html#_ts.new', 'statsforecast/models.py'),
                                      'statsforecast.models._add_conformal_distribution_intervals': ( 'src/core/models.html#_add_conformal_distribution_intervals',
                                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models._add_fitted_pi': ( 'src/core/models.html#_add_fitted_pi',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models._adida': ('src/core/models.html#_adida', 'statsforecast/models.py'),
                                      'statsforecast.models._chunk_forecast': ( 'src/core/models.html#_chunk_forecast',
                                                                                'statsforecast/models.py'),
                                      'statsforecast.models._chunk_sums': ('src/core/models.html#_chunk_sums', 'statsforecast/models.py'),
                                      'statsforecast.models._croston_classic': ( 'src/core/models.html#_croston_classic',
                                                                                 'statsforecast/models.py'),
                                      'statsforecast.models._croston_optimized': ( 'src/core/models.html#_croston_optimized',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models._croston_sba': ('src/core/models.html#_croston_sba', 'statsforecast/models.py'),
                                      'statsforecast.models._demand': ('src/core/models.html#_demand', 'statsforecast/models.py'),
                                      'statsforecast.models._expand_fitted_demand': ( 'src/core/models.html#_expand_fitted_demand',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models._expand_fitted_intervals': ( 'src/core/models.html#_expand_fitted_intervals',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models._get_conformal_method': ( 'src/core/models.html#_get_conformal_method',
                                                                                      'statsforecast/models.py'),
                                      'statsforecast.models._historic_average': ( 'src/core/models.html#_historic_average',
                                                                                  'statsforecast/models.py'),
                                      'statsforecast.models._imapa': ('src/core/models.html#_imapa', 'statsforecast/models.py'),
                                      'statsforecast.models._intervals': ('src/core/models.html#_intervals', 'statsforecast/models.py'),
                                      'statsforecast.models._optimized_ses_forecast': ( 'src/core/models.html#_optimized_ses_forecast',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models._predict_mstl_components': ( 'src/core/models.html#_predict_mstl_components',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models._predict_mstl_seas': ( 'src/core/models.html#_predict_mstl_seas',
                                                                                   'statsforecast/models.py'),
                                      'statsforecast.models._probability': ('src/core/models.html#_probability', 'statsforecast/models.py'),
                                      'statsforecast.models._random_walk_with_drift': ( 'src/core/models.html#_random_walk_with_drift',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models._seasonal_exponential_smoothing': ( 'src/core/models.html#_seasonal_exponential_smoothing',
                                                                                                'statsforecast/models.py'),
                                      'statsforecast.models._seasonal_ses_optimized': ( 'src/core/models.html#_seasonal_ses_optimized',
                                                                                        'statsforecast/models.py'),
                                      'statsforecast.models._seasonal_window_average': ( 'src/core/models.html#_seasonal_window_average',
                                                                                         'statsforecast/models.py'),
                                      'statsforecast.models._ses': ('src/core/models.html#_ses', 'statsforecast/models.py'),
                                      'statsforecast.models._ses_fcst_mse': ( 'src/core/models.html#_ses_fcst_mse',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models._ses_forecast': ( 'src/core/models.html#_ses_forecast',
                                                                              'statsforecast/models.py'),
                                      'statsforecast.models._ses_mse': ('src/core/models.html#_ses_mse', 'statsforecast/models.py'),
                                      'statsforecast.models._ses_optimized': ( 'src/core/models.html#_ses_optimized',
                                                                               'statsforecast/models.py'),
                                      'statsforecast.models._tsb': ('src/core/models.html#_tsb', 'statsforecast/models.py'),
                                      'statsforecast.models._window_average': ( 'src/core/models.html#_window_average',
                                                                                'statsforecast/models.py')},
            'statsforecast.mstl': {'statsforecast.mstl.mstl': ('src/mstl.html#mstl', 'statsforecast/mstl.py')},
            'statsforecast.tbats': { 'statsforecast.tbats._compute_sigmah': ('src/tbats.html#_compute_sigmah', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.calcLikelihoodTBATS': ( 'src/tbats.html#calclikelihoodtbats',
                                                                                  'statsforecast/tbats.py'),
                                     'statsforecast.tbats.calcTBATSFaster': ('src/tbats.html#calctbatsfaster', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.checkAdmissibility': ( 'src/tbats.html#checkadmissibility',
                                                                                 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.extract_params': ('src/tbats.html#extract_params', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.findPQ': ('src/tbats.html#findpq', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.find_harmonics': ('src/tbats.html#find_harmonics', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.initial_parameters': ( 'src/tbats.html#initial_parameters',
                                                                                 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.makeTBATSFMatrix': ('src/tbats.html#maketbatsfmatrix', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.makeTBATSGMatrix': ('src/tbats.html#maketbatsgmatrix', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.makeTBATSWMatrix': ('src/tbats.html#maketbatswmatrix', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.makeXMatrix': ('src/tbats.html#makexmatrix', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.tbats_forecast': ('src/tbats.html#tbats_forecast', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.tbats_model': ('src/tbats.html#tbats_model', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.tbats_model_generator': ( 'src/tbats.html#tbats_model_generator',
                                                                                    'statsforecast/tbats.py'),
                                     'statsforecast.tbats.tbats_selection': ('src/tbats.html#tbats_selection', 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.updateTBATSFMatrix': ( 'src/tbats.html#updatetbatsfmatrix',
                                                                                 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.updateTBATSGMatrix': ( 'src/tbats.html#updatetbatsgmatrix',
                                                                                 'statsforecast/tbats.py'),
                                     'statsforecast.tbats.updateTBATSWMatrix': ( 'src/tbats.html#updatetbatswmatrix',
                                                                                 'statsforecast/tbats.py')},
            'statsforecast.theta': { 'statsforecast.theta.auto_theta': ('src/theta.html#auto_theta', 'statsforecast/theta.py'),
                                     'statsforecast.theta.compute_pi_samples': ( 'src/theta.html#compute_pi_samples',
                                                                                 'statsforecast/theta.py'),
                                     'statsforecast.theta.forecast_theta': ('src/theta.html#forecast_theta', 'statsforecast/theta.py'),
                                     'statsforecast.theta.forward_theta': ('src/theta.html#forward_theta', 'statsforecast/theta.py'),
                                     'statsforecast.theta.initparamtheta': ('src/theta.html#initparamtheta', 'statsforecast/theta.py'),
                                     'statsforecast.theta.initstate': ('src/theta.html#initstate', 'statsforecast/theta.py'),
                                     'statsforecast.theta.is_constant': ('src/theta.html#is_constant', 'statsforecast/theta.py'),
                                     'statsforecast.theta.nelder_mead_theta': ( 'src/theta.html#nelder_mead_theta',
                                                                                'statsforecast/theta.py'),
                                     'statsforecast.theta.optimize_theta_target_fn': ( 'src/theta.html#optimize_theta_target_fn',
                                                                                       'statsforecast/theta.py'),
                                     'statsforecast.theta.pegelsresid_theta': ( 'src/theta.html#pegelsresid_theta',
                                                                                'statsforecast/theta.py'),
                                     'statsforecast.theta.switch_theta': ('src/theta.html#switch_theta', 'statsforecast/theta.py'),
                                     'statsforecast.theta.theta_target_fn': ('src/theta.html#theta_target_fn', 'statsforecast/theta.py'),
                                     'statsforecast.theta.thetacalc': ('src/theta.html#thetacalc', 'statsforecast/theta.py'),
                                     'statsforecast.theta.thetafcst': ('src/theta.html#thetafcst', 'statsforecast/theta.py'),
                                     'statsforecast.theta.thetaforecast': ('src/theta.html#thetaforecast', 'statsforecast/theta.py'),
                                     'statsforecast.theta.thetamodel': ('src/theta.html#thetamodel', 'statsforecast/theta.py'),
                                     'statsforecast.theta.thetaupdate': ('src/theta.html#thetaupdate', 'statsforecast/theta.py')},
            'statsforecast.utils': { 'statsforecast.utils.ConformalIntervals': ( 'src/utils.html#conformalintervals',
                                                                                 'statsforecast/utils.py'),
                                     'statsforecast.utils.ConformalIntervals.__init__': ( 'src/utils.html#conformalintervals.__init__',
                                                                                          'statsforecast/utils.py'),
                                     'statsforecast.utils._calculate_intervals': ( 'src/utils.html#_calculate_intervals',
                                                                                   'statsforecast/utils.py'),
                                     'statsforecast.utils._calculate_sigma': ('src/utils.html#_calculate_sigma', 'statsforecast/utils.py'),
                                     'statsforecast.utils._ensure_float': ('src/utils.html#_ensure_float', 'statsforecast/utils.py'),
                                     'statsforecast.utils._naive': ('src/utils.html#_naive', 'statsforecast/utils.py'),
                                     'statsforecast.utils._quantiles': ('src/utils.html#_quantiles', 'statsforecast/utils.py'),
                                     'statsforecast.utils._repeat_val': ('src/utils.html#_repeat_val', 'statsforecast/utils.py'),
                                     'statsforecast.utils._repeat_val_seas': ('src/utils.html#_repeat_val_seas', 'statsforecast/utils.py'),
                                     'statsforecast.utils._seasonal_naive': ('src/utils.html#_seasonal_naive', 'statsforecast/utils.py'),
                                     'statsforecast.utils.generate_series': ('src/utils.html#generate_series', 'statsforecast/utils.py'),
                                     'statsforecast.utils.restrict_to_bounds': ( 'src/utils.html#restrict_to_bounds',
                                                                                 'statsforecast/utils.py')}}}
